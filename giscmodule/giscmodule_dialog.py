# -*- coding: utf-8 -*-
"""
/***************************************************************************
 giscDialog
                                 A QGIS plugin
 ChangeSymbolToOutline
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-03-23
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Yaseen/Gisc
        email                : yaseen@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject,QgsSimpleFillSymbolLayer,QgsMessageLog,QgsSymbolLayerUtils
from PyQt5.QtGui import QFont,QGuiApplication
from qgis.core import QgsStyle,QgsWkbTypes
from qgis.utils import iface
from qgis.PyQt.QtWidgets import QApplication, QAction, QWidget, QPushButton, QMessageBox, QVBoxLayout
from qgis.core import QgsApplication,QgsVectorLayer,QgsVectorLayer,QgsCoordinateReferenceSystem
from qgis.gui import QgsColorButton
from PyQt5.QtCore import QSize
from qgis.PyQt.QtCore import Qt
from qgis.utils import OverrideCursor


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'giscmodule_dialog_base.ui'))


class giscDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(giscDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.getLayerList()
        self.btnChangeSym.clicked.connect(self.getLayerList)
        self.btnRemove.clicked.connect(self.deleteLayer)
        self.btnShow.clicked.connect(self.ShowLayer)
        self.btnZoom.clicked.connect(self.ZoomToSelectedLayers)
        self.btnStartEditing.clicked.connect(self.startEditing)
        self.layerList.itemSelectionChanged.connect(self.selectionChanged)
        self.listFields.itemSelectionChanged.connect(self.getFieldType)
        self.mColorButtonBorder.colorChanged.connect(self.changeOutlineColor)
        self.mColorButtonFill.colorChanged.connect(self.changeAllLayerFillColor)
        self.spinOutlineWidth. valueChanged.connect(self.changeOutlineColor)
        self.comboBoxField.currentIndexChanged.connect(self.bufferRoad)
        self.btnshowFields.clicked.connect(self.showFieldWindos)
        self.btnSelFeature.clicked.connect(self.selectFeature)
        self.btnClear.clicked.connect(self.deselectFeature)
        #self.checkOutline.stateChanged.connect(self.changeOutlineColor)

    def changeAllLayerOutline(self):
        # Get the instance of the current project
        project = QgsProject.instance()
        # Iterate over all layers in the project
        for layer in project.mapLayers().values():      
                layername=layer.name()
                layer = QgsProject.instance().mapLayersByName(layername)[0] 
                # Open the color dialog to select the color
                color = self.mColorButtonBorder.color()
                linew=self.spinOutlineWidth.value()  
                if color.isValid():
                    # Print the color in #RRGGBB format
                    print("Selected color:", color.name())
                    hexcolor=color.name()
                else:
                    print("No color selected.")
                    hexcolor="#000000"
                    #symbol = QgsStyle.defaultStyle().symbol("outline red")
                    #layer.renderer().setSymbol(symbol)
                if isinstance(layer, QgsVectorLayer):
                    symbol = layer.renderer().symbol()
                    symbol_layer = QgsSimpleFillSymbolLayer.create({
                    'color': '255, 255, 255, 0',  # Transparent fill color
                    'outline_color': hexcolor,   # Specified outline color
                    'outline_width': linew,      # Outline width
                    })

                    # Replace the existing symbol layer with the new one
                    if symbol_layer:
                        symbol.changeSymbolLayer(0, symbol_layer)
                        layer.triggerRepaint()
                        iface.layerTreeView().refreshLayerSymbology(layer.id());
                        # Refresh all layers
                        iface.mapCanvas().refreshAllLayers()

    def changeAllLayerFill(self):
        # Get the instance of the current project
        project = QgsProject.instance()
        # Iterate over all layers in the project
        for layer in project.mapLayers().values():      
                layername=layer.name()
                layer = QgsProject.instance().mapLayersByName(layername)[0] 
                # Open the color dialog to select the color
                color = self.mColorButtonFill.color()
                linew=self.spinOutlineWidth.value()  
                if color.isValid():
                    # Print the color in #RRGGBB format
                    print("Selected color:", color.name())
                    hexcolor=color.name()
                else:
                    print("No color selected.")
                    hexcolor="#000000"
                    #symbol = QgsStyle.defaultStyle().symbol("outline red")
                    #layer.renderer().setSymbol(symbol)
                if isinstance(layer, QgsVectorLayer):
                    symbol = layer.renderer().symbol()
                    symbol_layer = QgsSimpleFillSymbolLayer.create({
                    'color': hexcolor,  # Transparent fill color
        
                    })

                    # Replace the existing symbol layer with the new one
                    if symbol_layer:
                        symbol.changeSymbolLayer(0, symbol_layer)
                        layer.triggerRepaint()
                        iface.layerTreeView().refreshLayerSymbology(layer.id());
                        # Refresh all layers
                        iface.mapCanvas().refreshAllLayers()


    def changeSelectedLayerOutline(self):
        project = QgsProject.instance()
        selectedItems = self.layerList.selectedItems()
        layer_name=""
        if selectedItems:  # Check if there is any item selected
            for item in selectedItems:
                layer_name= item.text()
        else:
            print("No items selected.")
            
        if selectedItems:
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
                
            # Open the color dialog to select the color
            color = self.mColorButtonBorder.color()
            linew=self.spinOutlineWidth.value()   
            if color.isValid():
            # Print the color in #RRGGBB format
                print("Selected color:", color.name())
                hexcolor=color.name()
            else:
                print("No color selected.")
                hexcolor="#000000"
                #symbol = QgsStyle.defaultStyle().symbol("outline red")
                #layer.renderer().setSymbol(symbol)
            symbol = layer.renderer().symbol()
            symbol_layer = QgsSimpleFillSymbolLayer.create({
            'color': '255, 255, 255, 0',  # Transparent fill color
            'outline_color': hexcolor,   # Specified outline color
            'outline_width': linew,      # Outline width
            })

                # Replace the existing symbol layer with the new one
            if symbol_layer:
                symbol.changeSymbolLayer(0, symbol_layer)
                layer.triggerRepaint()
                iface.layerTreeView().refreshLayerSymbology(layer.id());
                # Refresh all layers
                iface.mapCanvas().refreshAllLayers()

    def changeSelectedFill2(self):
        project = QgsProject.instance()
        selectedItems = self.layerList.selectedItems()
        layer_name=""
        if selectedItems:  # Check if there is any item selected
            for item in selectedItems:
                layer_name= item.text()
        else:
            print("No items selected.")
            
        if selectedItems:
           layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
                
            # Open the color dialog to select the color
           color = self.mColorButtonFill.color()
           if color.isValid():
            # Print the color in #RRGGBB format
                print("Selected color:", color.name())
                hexcolor=color.name()
           else:
                print("No color selected1.")
                hexcolor="#000000"

           if isinstance(layer, QgsVectorLayer):    
                symbol = layer.renderer().symbol()
                symbol_layer = QgsSimpleFillSymbolLayer.create({
                'color': hexcolor,   # Specified outline color
                })

                    # Replace the existing symbol layer with the new one
           if symbol_layer:
                    symbol.changeSymbolLayer(0, symbol_layer)
                    layer.triggerRepaint()
                    iface.layerTreeView().refreshLayerSymbology(layer.id());
                    # Refresh all layers
                    iface.mapCanvas().refreshAllLayers()
    
    def changeSelectedLayerFill(self):
        project = QgsProject.instance()
        selectedItems = self.layerList.selectedItems()
        layer_name=""
        if selectedItems:  # Check if there is any item selected
            for item in selectedItems:
                layer_name= item.text()
        else:
            print("No items selected.")
            
        #if selectedItems:
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
                
            # Open the color dialog to select the color
            color = self.mColorButtonFill.color()
                
            if color.isValid():
            # Print the color in #RRGGBB format
                print("Selected color:", color.name())
                hexcolor=color.name()
            else:
            
             if isinstance(layer, QgsVectorLayer):
                    print("No color selected.")
                    hexcolor="#000000"
                    symbol = layer.renderer().symbol()
                    symbol_layer = QgsSimpleFillSymbolLayer.create({
                    'color': hexcolor,  # Transparent fill color
            
                    })

                    # Replace the existing symbol layer with the new one
                    if symbol_layer:
                        symbol.changeSymbolLayer(0, symbol_layer)
                        layer.triggerRepaint()
                        iface.layerTreeView().refreshLayerSymbology(layer.id());
                    # Refresh all layers
                    iface.mapCanvas().refreshAllLayers()
    
    def pointFMarkerSym(self,layer,color,strokeWidth):
        layer = iface.activeLayer()
        single_symbol_renderer = layer.renderer()
        symbol = single_symbol_renderer.symbol()
        symbol.symbolLayer(0).setStrokeColor(color)
        symbol.symbolLayer(0).setStrokeWidth(strokeWidth)
        layer.triggerRepaint()
        iface.layerTreeView().refreshLayerSymbology(layer.id())
        


    def outlineFill(self):
        # Get the instance of the current project
        project = QgsProject.instance()
        # Iterate over all layers in the project
        for layer in project.mapLayers().values():      
            layername=layer.name()
            layer = QgsProject.instance().mapLayersByName(layername)[0] 
            symbol = QgsStyle.defaultStyle().symbol("outline red")
            layer.renderer().setSymbol(symbol)
            layer.triggerRepaint()
            iface.layerTreeView().refreshLayerSymbology(layer.id());
        # Refresh all layers
        iface.mapCanvas().refreshAllLayers()
        
        self.getLayerList()
        
   
    
    def getLayerList(self):
        x=0
        project = QgsProject.instance()
        self.layerList.clear()
        self.comboBoxField.clear()
        for layer in project.mapLayers().values():
            #print(layer.name())
            # Print the name of each layer
            layername=layer.name()
            x=x+1
            self.layerList.addItem(layername)
            self.comboBoxField.addItem(layername)
        self.labelLayerCount.setFont(QFont("Arial", 16))
        self.labelLayerCount.setText(str(x))
        self.layerList.setCurrentRow(0)
        self.checkLayerVisibility()
        layercnt=self.layerList.count ();
        if layercnt>0:
           self.getFieldNames(self.getSelectedLayer())
           lyr=self.getSelectedLayer();
           if isinstance(lyr, QgsVectorLayer):
              print(lyr.geometryType())
        #print(self.getSelectedLayer().geometryType())

    def getSelectedLayer(self):
        layercnt=self.layerList.count ();
        if layercnt>0:
            project = QgsProject.instance()
            selectedItems = self.layerList.selectedItems()
            layer_name=""
            if selectedItems:  # Check if there is any item selected
                for item in selectedItems:
                #print(item.text())  # Assuming you want to print the text of each selected item
                 layer_name= item.text()
            else:
                print("No items selected1.")
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
            return layer
        
    def selectionChanged(self):
       project = QgsProject.instance()
       selectedItems = self.layerList.selectedItems()
       if selectedItems:  # Check if there is any item selected
          for item in selectedItems:
              #print(item.text())  # Assuming you want to print the text of each selected item
              layer = project.mapLayersByName(item.text())[0]  # Get the layer by name
              layer_tree = project.layerTreeRoot().findLayer(layer.id())  # Find the layer in the layer tree
              is_visible = layer_tree.itemVisibilityChecked()  # Check current visibility
              self.checkLayerVisibility()
              self.getFieldNames(layer)
              lyr=self.getSelectedLayer();
              if isinstance(layer, QgsVectorLayer):
                    crs = layer.crs()
                  #print(f"The CRS of the shapefile is: {crs}")
                  # Print the CRS information
                    self.lblCrs.setText(str(crs.description()))
                    print(f'CRS EPSG Code: {crs.authid()}')
                    print(f'CRS Description: {crs.description()}')
                    print(f'Projection Acronym: {crs.projectionAcronym()}')
                    print(f'Geographic: {crs.isGeographic()}')
                    print(f'Ellipsoid Acronym: {crs.ellipsoidAcronym()}')
                    print(lyr.geometryType())
              else:
                  print("Not a vector feature.")
              #layer_tree.setItemVisibilityChecked(not is_visible)  # Toggle visibility
       else:
              print("No items selected.")
              
            
    # Function to toggle the visibility of a layer by its name
    def toggle_layer_visibility(layer_name):
            project = QgsProject.instance()
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
            layer_tree = project.layerTreeRoot().findLayer(layer.id())  # Find the layer in the layer tree
            is_visible = layer_tree.itemVisibilityChecked()  # Check current visibility
            layer_tree.setItemVisibilityChecked(not is_visible)  # Toggle visibility

    def ShowLayer(self):
        if self.checkShowAll.isChecked():
           self.showHideAllLayers()
        else:
            project = QgsProject.instance()
            selectedItems = self.layerList.selectedItems()
            layer_name=""
            if selectedItems:  # Check if there is any item selected
                for item in selectedItems:
                    #print(item.text())  # Assuming you want to print the text of each selected item
                    layer_name= item.text()
                    layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
                    layer_tree = project.layerTreeRoot().findLayer(layer.id())  # Find the layer in the layer tree
                    is_visible = layer_tree.itemVisibilityChecked()  # Check current visibility
                    layer_tree.setItemVisibilityChecked(not is_visible)  # Toggle visibility
                    self.checkLayerVisibility()
            else:
                    print("No items selected.")
        
       

    def isVisible(self):
        is_visible=True
        project = QgsProject.instance()
        if self.layerList.count()>0:
            selectedItems = self.layerList.selectedItems()
            layer_name=""
            if selectedItems:  # Check if there is any item selected
                for item in selectedItems:
                #print(type(item))  # Assuming you want to print the text of each selected item
                 layer_name= item.text()
            else:
                print("No items selected.")
            
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
            layer_tree = project.layerTreeRoot().findLayer(layer.id())  # Find the layer in the layer tree
            is_visible = layer_tree.itemVisibilityChecked()  # Check current visibility
            #layer_tree.setItemVisibilityChecked(not is_visible)  # Toggle visibility
        return is_visible
       
        
          

    def checkLayerVisibility(self):
        if self.isVisible():
                  self.btnShow.setText("Hide")
                  self.btnShow.setStyleSheet("background-color: green;color:white")
                  #self.btnShow.setStyleSheet("color:white")
        else:
                  self.btnShow.setText("Show")
                  self.btnShow.setStyleSheet("background-color:red;color:white")
                  #self.btnShow.setStyleSheet("color:white")
    
    def startUp(self):

        pass

    def deleteLayer(self):
        if self.checkRemoveAllLayer.isChecked():
           self.deleteAllLayer()
           
        else:
            layer_name = ''  # Replace with your layer's name
            project = QgsProject.instance()  # Get the current project instance
            selectedItems = self.layerList.selectedItems()
            
        
            if selectedItems:  # Check if there is any item selected
                for item in selectedItems:
                #print(item.text())  # Assuming you want to print the text of each selected item
                 layer_name= item.text()
            else:
                print("No items selected.")

            layers = project.mapLayersByName(layer_name)  # Find layers by name
            # Remove the specified layers
            for layer in layers:
             if self.confirm_delete_layer(layer):
              project.removeMapLayer(layer.id())
            self.getLayerList()
            iface.mapCanvas().refreshAllLayers()
            #self.layerList.removeItemWidget(item)
    
    def confirm_delete_layer(self,layer_name):
        msgbox = QMessageBox()
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setWindowTitle("Delete Layer Confirmation")
        msgbox.setText("Are you sure you want to delete the layer: %s?" % layer_name.name())
        msgbox.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msgbox.setDefaultButton(QMessageBox.No)
        
        response = msgbox.exec_()
        if response == QMessageBox.Yes:
            print("Layer deleted.")
            return True
            # Code to delete the layer goes here
        else:
            print("Layer deletion cancelled.")
            return False
    
    def confirm_delete_all_layer(self):
        msgbox = QMessageBox()
        msgbox.setIcon(QMessageBox.Critical)
        msgbox.setWindowTitle("Delete Layer Confirmation")
        msgbox.setText("Are you sure you want to delete all the layer?")
        msgbox.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msgbox.setDefaultButton(QMessageBox.No)
        
        response = msgbox.exec_()
        if response == QMessageBox.Yes:
            print("Layer deleted.")
            return True
            # Code to delete the layer goes here
        else:
            print("Layer deletion cancelled.")
            return False
        
    shCount=1
    def showHideAllLayers(self):
        project = QgsProject.instance()
        self.shCount=self.shCount+1
        if(self.shCount%2==0):
            self.btnShow.setText("Show")
            self.btnShow.setStyleSheet("background-color:red;color:white")
            for layer in project.mapLayers().values():
                layer_tree = project.layerTreeRoot().findLayer(layer.id())  # Find the layer in the layer tree
                is_visible = layer_tree.itemVisibilityChecked()  # Check current visibility
                if is_visible:
                   layer_tree.setItemVisibilityChecked(not is_visible)  # Toggle visibility
        
          
                  #self.btnShow.setStyleSheet("color:white")
        else:
            self.btnShow.setText("Hide")
            self.btnShow.setStyleSheet("background-color: green;color:white")
            for layer in project.mapLayers().values():
                layer_tree = project.layerTreeRoot().findLayer(layer.id())  # Find the layer in the layer tree
                is_visible = layer_tree.itemVisibilityChecked()  # Check current visibility
                if is_visible==False:
                   layer_tree.setItemVisibilityChecked(not is_visible)  # Toggle visibility
            iface.mapCanvas().refreshAllLayers()

    def deleteAllLayer(self):
        if self.confirm_delete_all_layer():
            project = QgsProject.instance()
            QGuiApplication.setOverrideCursor(Qt.WaitCursor)#Wait for long time taking for multiple numbers of layers
           
            for layer in project.mapLayers().values():
                project.removeMapLayer(layer.id())
            iface.mapCanvas().refreshAllLayers()
            self.getLayerList()
            QGuiApplication.restoreOverrideCursor()
            self.listFields.clear();
  
         
 

   

    def startEditing2(self):
        layer = self.iface.activeLayer()
        layer.startEditing()
        iface.legendInterface().setCurrentLayer(layer)  # returns bool
        iface.mapCanvas().refreshAllLayers()

    def changeOutlineColor(self):
        if self.checkOutline.isChecked():
            self.changeAllLayerOutline()
        else:
            self.changeSelectedLayerOutline()

    def changeAllLayerFillColor(self):
        if self.checkFill.isChecked():
            self.changeAllLayerFill()
        else:
            self.changeSelectedFill2()    

     # Update Attribute value
    def UpdateFeature(self,color):
        layer = self.iface.activeLayer()
        provider = layer.dataProvider()
        fldIdx = provider.fieldNameIndex("Color") # Get Column
        features = layer.selectedFeatures()
        if not features:
            return
        layer.startEditing()
        for feature in features:
            feature[fldIdx] = color.name()
            layer.updateFeature(feature)

        layer.commitChanges()
        return
    
    def startEditing(self):
        project = QgsProject.instance()
        selectedItems = self.layerList.selectedItems()
        layer_name=""
        if selectedItems:  # Check if there is any item selected
            for item in selectedItems:
             layer_name= item.text()
             layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
             if isinstance(layer, QgsVectorLayer):
                 iface.mapCanvas().setExtent(layer.extent())
                 # Refresh the map canvas to reflect the changes
                 iface.mapCanvas().refresh()
                 layer.startEditing()
        else:
            print("No items selected.")
        
        

        



    def bufferRoad(self):
        project = QgsProject.instance()
        layer_name=""
        
        selectedLayer=self.comboBoxField.currentText ()
        if selectedLayer=="RoadCentre":
           layer_name=selectedLayer
           layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
           print("Buffer is applicable")
        
            
        
    def getFieldNames(self,layer):
     if isinstance(layer, QgsVectorLayer):
        field_names = layer.fields().names()
        self.listFields.clear();
        for fname in field_names:
            self.listFields.addItem(fname)
     else:
         print("!Opps not a vector layer.")
         self.listFields.clear();

    def getFieldType(self)   :
        
        pass

    def deselectFeature(self)   :
        project = QgsProject.instance()
        selectedItems = self.layerList.selectedItems()
        layer_name=""
        if selectedItems:  # Check if there is any item selected
            for item in selectedItems:
             layer_name= item.text()
             print(layer_name)
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
            layer.removeSelection()
            self.label_fcount.setText("0")
        else:
            print("No items selected.")
        
        

    def selectFeature(self,layer_name):
        project = QgsProject.instance()
        selectedItems = self.layerList.selectedItems()
        layer_name=""
        fieldname=""
        selectedField=self.listFields.selectedItems()
        if selectedItems:  # Check if there is any item selected
            #start
            if selectedField:
               for field in selectedField:
                   fieldname=field.text()
            else:
                print("field not selected.")
            #end
            for item in selectedItems:
             layer_name= item.text()
        else:
            print("layer not selected.")
        
        if selectedItems:
            searchString=self.lineEditSearch.text()
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
            if isinstance(layer, QgsVectorLayer):
            #layer.selectByExpression("\"city\"='Patna'")
                #myVariable = 'Patna'
                #layer.selectByExpression( " \"city\" = '{}' ".format(fieldname) )
                layer.selectByExpression(fieldname+"='{}'".format(searchString) )
                if self.checkZoomToSelFeatures.isChecked():
                    box = layer.boundingBoxOfSelected()
                    iface.mapCanvas().setExtent(box)
                    iface.mapCanvas().refresh()
                    feats_count = layer.featureCount()
                    selected_feat_count=layer.selectedFeatureCount()
                    self.label_fcount.setText(str(selected_feat_count))
                    idx = layer.fields().indexOf(fieldname)
                    values = layer.uniqueValues(idx)
                    print("Type of values:",type(values))
                    for rows in values:
                        print(rows)
            
                    
        

    countWind=1
    def showFieldWindos(self)   :
        self.countWind=self.countWind+1
        if(self.countWind%2==0):
            self.resize(QSize(590, 440))
            self.btnshowFields.setText("Hide Fields")
        else:
            self.resize(QSize(410, 440))
            self.btnshowFields.setText("Show Fields")
        

    def ZoomToSelectedLayers(self):
        project = QgsProject.instance()
        selectedItems = self.layerList.selectedItems()
        layer_name=""
        if selectedItems:  # Check if there is any item selected
            for item in selectedItems:
             layer_name= item.text()
            layer = project.mapLayersByName(layer_name)[0]  # Get the layer by name
            iface.mapCanvas().setExtent(layer.extent())
            # Refresh the map canvas to reflect the changes
            iface.mapCanvas().refresh()
        else:
            print("No items selected.")
        
        

    

    def checkGeometry(self,layer):
        if layer.wkbType() == Qgs.WKBPoint:
            print('Layer is a point layer')
        elif layer.wkbType() == Qgs.WKBLineString:
            print('Layer is a line layer')
        elif layer.wkbType() == Qgs.WKBPolygon:
            print('Layer is a polygon layer')
        elif layer.wkbType() == Qgs.WKBMultiPolygon:
            print('Layer is a multi-polygon layer')
        elif layer.wkbType() == 100:
            print('Layer is a data-only layer')
  
       